{
	"compilerOptions": {
		"target": "ES2022" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
		"module": "NodeNext" /* Specify what module code is generated. */,
		"allowJs": false /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
		"strict": true /* Enable all strict type-checking options. */,
		"noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
		"strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
		"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
		"strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
		"strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
		"noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
		"useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
		"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
		"noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
		"noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
		"exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
		"noImplicitReturns": false /* Enable error reporting for codepaths that do not explicitly return in a function. */,
		"noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
		"noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,
		"noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
		"allowUnusedLabels": true /* Disable error reporting for unused labels. */,
		"allowUnreachableCode": true /* Disable error reporting for unreachable code. */,
		"skipLibCheck": false,
		"resolveJsonModule": true,
		"moduleResolution": "NodeNext",
		"outDir": "./dist/",
		"typeRoots": ["./node_modules/@types"],
		"baseUrl": "src",
		"paths": {
			"Utils/*": ["./Utils/*"],
			"Versions/*": ["./Versions/*"],
			"Database/*": ["./Database/*"],
			"Middlewares/*": ["./Middlewares/*"],
			"Routes/*": ["./Routes/*"],
			"Types/*": ["./Types/*"]
		}
	},
	"references": [
		{ "path": "./tsconfig.dev.json" },
		{ "path": "./tsconfig.eslint.json" }
	],
	"include": ["src"],
	"exclude": [
		"**/*.test.ts",
		"**/*.spec.ts",
		"**/__tests__/**/*.ts",
		"./scripts/**/*.ts"
	]
}
